1. 基本概念

   a.空白一般会被忽略
   b.启用-w模式是会产生警告
   c.以分号和换行符结尾，但是如果遇到行尾有运算符则表示一个语句的开始，如+，-
   d.标识符区分大小写，ruby标识符名称可以包含字母数字下划线
   
2. 保留字

   BEGIN	do	next	then
   END	else	nil	true
   alias	elsif	not	undef
   and	end	or	unless
   begin	ensure	redo	until
   break	false	rescue	when
   case	for	retry	while
   class	if	return	while
   def	in	self	__FILE__
   defined?	module	super	__LINE__
   
3. ruby BENGIN语句

   a. 语法：
          BEGIN {
              code
          }
   b. 说明：
          声明的code会在程序运行之前被调用
          
4. ruby END语句

   a. 语法：
          END {
              code
          }
          
   b. 说明：
          声明的code会在程序的结尾被调用

5. 注释

   a. # 代表单行注释
   
   b. =begin/=end 多行注释
   

6. 整型
   
   整型分为两种
   
   a. 31位以内(四字节)， 为fixnum实例
   b. 如果超过了，即为bignum实例
   
   c. 范围 -230--230-1 or -262--262-1
   

7. 浮点数

   a. 浮点数是带有小数点的数字，是Float的对象
   
   12.2
   1.0e5
   4E20
   4e+20
   
   指数不必是整数
   
   puts 2**(1/4)
   puts 16**(1/4.0)


8. 字符串类型
   
   ruby字符串是一个八个字节的序列，是类String的对象
   
   双引号标记的字符串允许替换和使用反斜线符号，单引号标记的字符串不允许替换，且只允许使用 \\ 和 \' 两个反斜线符号

   #{express} 字符串插值，替换任意ruby表达式的值为一个字符串
   
   name = "ruby"
   puts "#{name + "ok"}"
   

9. 反斜线符号

   符号	表示的字符
   \n	换行符 (0x0a)
   \r	回车符 (0x0d)
   \f	换页符 (0x0c)
   \b	退格键 (0x08)
   \a	报警符 Bell (0x07)
   \e	转义符 (0x1b)
   \s	空格符 (0x20)
   \nnn	八进制表示法 (n 是 0-7)
   \xnn	十六进制表示法 (n 是 0-9、a-f 或 A-F)
   \cx, \C-x	Control-x
   \M-x	Meta-x (c | 0x80)
   \M-\C-x	Meta-Control-x
   \x	字符 x


10. 数组

   数组字面量通过[]中以逗号分隔定义，且支持range定义。

  （1）数组通过[]索引访问
  （2）通过赋值操作插入、删除、替换元素
  （3）通过+，－号进行合并和删除元素，且集合做为新集合出现
  （4）通过<<号向原数据追加元素
  （5）通过*号重复数组元素
  （6）通过｜和&符号做并集和交集操作（注意顺序）
  
  arr = ["red", "blue", "yellow", 1, 2.2]
  
  arr.each do |i|
      puts i
  end
  

11. 哈希

    Ruby 哈希是在大括号内放置一系列键/值对，键和值之间使用逗号和序列 => 分隔。尾部的逗号会被忽略
    
    hash = c = {"google" => "google.com", "baidu" => "baidu.com"}

    hash.each do |key, value|
        print key, value
    end


12. 范围类型

    一个范围表示一个区间。

   范围是通过设置一个开始值和一个结束值来表示。范围可使用 s..e 和 s...e 来构造，或者通过 Range.new 来构造。

   使用 .. 构造的范围从开始值运行到结束值（包含结束值）。使用 ... 构造的范围从开始值运行到结束值（不包含结束值）。当作为一个迭代器使用时，范围会返回序列中的每个值。

   范围 (1..5) 意味着它包含值 1, 2, 3, 4, 5，范围 (1...5) 意味着它包含值 1, 2, 3, 4 

   (1..12).each do |n|
       print n
       
   end

























